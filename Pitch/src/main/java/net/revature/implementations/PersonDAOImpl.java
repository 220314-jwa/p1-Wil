package net.revature.implementations;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Set;
import net.revature.data.PersonDAO;
import net.revature.models.Person;
import net.revature.services.ConnectionFactory;

public class PersonDAOImpl implements PersonDAO {

	// This is the Connection object used to connect to the database
	// Creating this object, you need to import the connection package
	Connection connection;

	public PersonDAOImpl() {
		connection = ConnectionFactory.getConnection();
	}

	@Override
	// This method inserts a person who can be either an author or an editor to the
	// database.
	public int create(Person dataToAdd) {

		// This stores our sql command.
		String sql = "insert into person (id,firstName,lastName, role,username, password)"
				+ "values(default, ?,?,?,?,?);";

		// Now let's generate the Prepared Statement so the database can now what
		// exactly we are asking for and what to give us
		// We will also add a RETURN_GENERATED_KEY flag that will so we can get the id
		// of the row being generated.
		// We will also need to import the PreparedStatement key from Java packages.

		try {
			// int generatedId=0;
			

			PreparedStatement preparedStatement = connection.prepareStatement(sql,
					PreparedStatement.RETURN_GENERATED_KEYS);
			// set up the fields
			preparedStatement.setInt(1, dataToAdd.getId());
			preparedStatement.setString(2, dataToAdd.getFirstName());
			preparedStatement.setString(3, dataToAdd.getLastName());
			preparedStatement.setString(4, dataToAdd.getRole());
			preparedStatement.setString(5, dataToAdd.getUsername());
			preparedStatement.setString(6, dataToAdd.getPassword());

			// execute the line below to affect rows on the table and return number of rows
			// affected
			int count = preparedStatement.executeUpdate();
			// let us return the id that is autogenerated
			ResultSet resultSet = preparedStatement.getGeneratedKeys();
			if (count > 0) {
				System.out.println("One user added to the database");
				resultSet.next();
				int id = resultSet.getInt(1);

				return id;
			} else {

				System.out.println("Something is wrong when trying to add a user to the database");
				return -1;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return -1;
		}
	}

	@Override
	public void update(Person dataToUpdate) {
		String sql = "update person set firstName=?, lastName=?, role=? , username=?, password=?" + "where id=?;";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1/*
											 * This means, first column and it can be replaced by the column name
											 */, dataToUpdate.getFirstName());
			preparedStatement.setString(2, dataToUpdate.getLastName());
			preparedStatement.setString(3, dataToUpdate.getRole());
			preparedStatement.setString(4, dataToUpdate.getUsername());
			preparedStatement.setString(5, dataToUpdate.getPassword());
			preparedStatement.setInt(6, dataToUpdate.getId());

			int rowsUpdated = preparedStatement.executeUpdate();

			if (rowsUpdated == 1) {
				System.out.println("User info has been updated");
			} else if (rowsUpdated != 1) {
				System.out.println("Oops, something went wrong with the update");
			}

		} catch (SQLException e) {
			e.printStackTrace();

		}

	}

	@Override
	public void delete(Person dataToDelete) {
		String sql = "delete from person where username=?";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, dataToDelete.getUsername());
			int count = preparedStatement.executeUpdate();
			if (count != 1) {
				System.out.println("Something went wrong with the deletion");
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@Override
	public Person getByUsername(String username) {
		Person person = null;
		String sql = "SELECT * FROM  person where username=?";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, username);
			// We use execute query to get data instead of executeUdpate, which we use to
			// insert, update, delete,
			ResultSet resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {

				person = PersonDAOImpl.parseResultSet(resultSet);
				return person;

			} else {
				System.out.println("Something went wrong when querying the user");
			}
			return person;

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return person;
	}

	private static Person parseResultSet(ResultSet resultSet) throws SQLException {
		Person person = new Person();
		// do something with the return value
		person.setId(resultSet.getInt(1));
		person.setFirstName(resultSet.getString(2));
		person.setLastName(resultSet.getString(3));
		person.setRole(resultSet.getString(4));
		person.setUsername(resultSet.getString(5));
		person.setPassword(resultSet.getString(6));

		return person;
	}

	@Override
	public Set<Person> getAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Person getId() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Person getUserById(int id) {
		// TODO Auto-generated method stub
		Person person = null;

		String sql = "SELECT * FROM person where id=?";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);

			preparedStatement.setInt(1, id);

			ResultSet resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				person = PersonDAOImpl.parseResultSet(resultSet);
				return person;
			} else {
				System.out.println("Something went wrong when querying the user");

			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return person;

	}

	@Override
	public int getById(int id) {
		return id;
		// TODO Auto-generated method stub
	}

	public void deleteById(int id) {
		String sql = "delete from person where id=?";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);
			int count = preparedStatement.executeUpdate();
			if (count != 1) {
				System.out.println("Something went wrong with the deletion");
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}